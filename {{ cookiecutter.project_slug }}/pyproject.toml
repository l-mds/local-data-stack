[project]
name = "{{ cookiecutter.project_slug }}"
version = "1.0.0"
description = "{{ cookiecutter.project_name }}"
authors = [{ name = "{{ cookiecutter.author }}", email = "{{ cookiecutter.author_email }}" }]
requires-python = "== 3.12"

[tool.pixi.project]
platforms = ["linux-64", "osx-arm64", "win-64", "linux-aarch64"]
channels = ["conda-forge"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pixi.environments]
template = { features = ["template"], solve-group = "template" }
ci-basics = { features = ["ci-basics"], solve-group = "ci-basics" }
secops = { features = ["secops"], solve-group = "secops" }
codelocation-foo = { features = [
  "codelocation-foo",
  "dagster-basics",
  "shared-library",
], solve-group = "codelocation-foo" }
codelocation-{{ cookiecutter.project_slug_pixi }} = { features = [
  "codelocation-{{ cookiecutter.project_slug_pixi }}",
  "shared-library",
  "dagster-basics",
  "shared",
], solve-group = "codelocation-{{ cookiecutter.project_slug_pixi }}" }
ci-validation = { features = [
  "ci-basics",
  "codelocation-{{ cookiecutter.project_slug_pixi }}",
  "codelocation-foo",
  "shared-library",
  "shared",
  "dagster-webserver",
  "notebookdev",
  "dagster-daemon",
  "dagster-basics",

], solve-group = "default" }
dev = { features = [
  "ci-basics",
  "codelocation-{{ cookiecutter.project_slug_pixi }}",
  "codelocation-foo",
  "shared-library",
  "notebookdev",
  "shared",
  "dagster-webserver",
  "dagster-daemon",
  "dagster-basics",

], solve-group = "default" }
dagster-webserver = { features = [
  "dagster-webserver",
  "dagster-basics",
], solve-group = "default" }
dagster-daemon = { features = [
  "dagster-daemon",
  "dagster-basics",
], solve-group = "default" }

[tool.pixi.feature.ci-basics.dependencies]
yamllint = ">=1.35.1,<2"
taplo = ">=0.9.3,<0.10"
pytest = ">=8.3.4,<9"
pytest-mock = ">=3.14.0,<4"
pytest-cov = "~=6.0.0"
ruff = ">=0.9.1,<1"
pyright = "~=1.1.391"
git = "~=2.47.1"

[tool.pixi.feature.ci-basics.pypi-dependencies]
moto = "~=5.0.26"
nbqa = "~=1.9.0"
sqlfluff = "~=3.3.0"
sqlfluff-templater-dbt = "~=3.3.0"

[tool.pixi.feature.notebookdev.pypi-dependencies]
jupyterlab = "~=4.3.4"
jupyterlab-git = ">=0.50.2,<0.60"
ipywidgets = "~=8.1.5"

[tool.pixi.feature.dagster-basics.dependencies]

[tool.pixi.feature.dagster-basics.pypi-dependencies]
dagster = ">=1.9.8,<1.10"
dagster-postgres = ">=0.25.8,<0.26"
dagster-cloud = ">=1.9.8,<1.10"

[tool.pixi.feature.dagster-daemon.pypi-dependencies]
dagster-docker = ">=0.25.8,<0.26"

[tool.pixi.feature.dagster-webserver.pypi-dependencies]
dagster-webserver = ">=1.9.8,<1.10"
dagster-docker = ">=0.25.8,<0.26"

[tool.pixi.feature.shared-library.dependencies]
[tool.pixi.feature.shared-library.pypi-dependencies]

[tool.pixi.feature.shared.dependencies]
pandas = ">=2.2.3,<3"
duckdb = "~=1.1.3"
pyarrow = "~=18.1.0"
pydantic = "~=2.10.5"

[tool.pixi.feature.shared.pypi-dependencies]
polars = ">=1.19.0,<2"
shared-library = { path = "./src/shared_library", editable = true }

[tool.pixi.feature.codelocation-foo.dependencies]
[tool.pixi.feature.codelocation-foo.pypi-dependencies]
quickstart_etl = { path = "./src/code_location_foo", editable = true }

[tool.pixi.feature.codelocation-{{ cookiecutter.project_slug_pixi }}.dependencies]
[tool.pixi.feature.codelocation-{{ cookiecutter.project_slug_pixi }}.pypi-dependencies]
dbt-core = ">=1.8.9,<1.9"
dbt-duckdb = "~=1.8.4"
dagster-dbt = ">=0.25.8,<0.26"
dagster-duckdb = ">=0.25.8,<0.26"
dagster-duckdb-polars = ">=0.25.8,<0.26"
dagster-duckdb-pandas = ">=0.25.8,<0.26"
code_location_{{ cookiecutter.project_slug }} = { path = "./src/code_location_{{ cookiecutter.project_slug }}", editable = true }

[tool.pixi.feature.template.dependencies]
cruft = "~=2.16.0"

[tool.pixi.feature.template.pypi-dependencies]
jinja2-ospath = ">=0.3.0,<0.4.0"

[tool.pixi.feature.secops.dependencies]
go-sops = "~=3.9.2"
age = "~=1.2.1"

[tool.pixi.feature.secops.pypi-dependencies]

[tool.pixi.tasks]

[tool.pixi.tasks.notebook]
cmd = "pixi run -e dev jupyter lab"
description = "Start jupyter notebook"

[tool.pixi.tasks.fmt]
cmd = "pixi run -e ci-basics ruff format ./src && ruff check --fix ./src  && nbqa 'ruff format' src/* && yamllint -c yamllintconfig.yaml . && taplo fmt"
description = "Format python files"
env = { RUST_LOG = "warn" }

[tool.pixi.tasks.fmt-unsafe]
cmd = "pixi run -e ci-basics nbqa 'ruff format' src/* && ruff format ./src && nbqa ruff --fix --unsafe-fixes ./src/* && ruff check --fix --unsafe-fixes ./src && yamllint -c yamllintconfig.yaml . && taplo fmt"
description = "Format python files - apply automatic ruff unsafe fixes"

[tool.pixi.tasks.lint]
cmd = "ruff check ./src && yamllint -c yamllintconfig.yaml . && taplo check && pyright"
description = "Validate formatting and type check python files"

[tool.pixi.tasks.test]
cmd = "pytest --ignore=src/{{ cookiecutter.project_slug_pixi }}/code_location_{{ cookiecutter.project_slug_pixi }}_dbt/dbt_packages src"
description = "Validate formatting and type check python files"

[tool.pixi.tasks.tpl-update]
cmd = "pixi run -e template cruft update"
description = "Update from template"

[tool.pixi.tasks.start-dev]
cmd = "pixi run -e ci-validation dagster dev"
cwd = "."
env = { FOO = "bar" }
description = "Start dagster webserver in dev mode"

[tool.pixi.tasks.cleanup-state]
cmd = "rm -rf {{ cookiecutter.state_path }}"
description = "clean state directory"

[tool.pixi.tasks.secrets-encrypt]
cmd = "pixi run -e secops ./scripts/encrypt_secrets.sh"
description = "encrypt secrets with SOPS and AGE"

[tool.pixi.tasks.secrets-decrypt]
cmd = "pixi run -e secops ./scripts/decrypt_secrets.sh"
description = "decrypt secrets with SOPS and AGE"

[tool.pixi.tasks.clean-local-branches]
cmd = "pixi run -e ci-basics ./scripts/git_clean_local_branches.sh"
description = "cleanup local non used branches"

[tool.ruff]
exclude = [
  ".git",
  "__pycache__",
  "docs/source/conf.py",
  "old",
  "build",
  "dist",
  ".pixi",
  "src/{{ cookiecutter.project_slug }}/code_location_{{ cookiecutter.project_slug }}_dbt/dbt_packages",
  "*.ipynb",
]

line-length = 88

[tool.ruff.lint]
ignore = ["E501"]
select = ["F", "E", "W", "C", "B", "I"]

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.pyright]
include = [
  "src/code_location_{{ cookiecutter.project_slug }}",
  "src/code_location_foo",
  "src/shared_library",
]
exclude = [
  "src/code_location_{{ cookiecutter.project_slug }}/build",
  "src/code_location_foo/build",
  "src/shared_library/build",
]
pythonVersion = "3.12"
venvPath = ".pixi/envs"
venv = "ci-validation"
extraPaths = [
  "src/code_location_{{ cookiecutter.project_slug }}",
  "src/code_location_foo",
  "src/shared_library",
]

reportMissingTypeStubs = false
reportImportCycles = "error"
useLibraryCodeForTypes = true
# TODO become more strict over time
#typeCheckingMode = "strict"
typeCheckingMode = "standard"
#typeCheckingMode = "basic"


reportArgumentType = "warning"
reportCallIssue = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalSubscript = "warning"

[tool.taplo]
exclude = []
